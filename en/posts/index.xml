<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Posts on schnellerhase</title><link>https://schnellerhase.github.io/en/posts/</link><description>Recent content in Posts on schnellerhase</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><copyright>CC BY-NC-SA 4.0</copyright><lastBuildDate>Thu, 22 Aug 2024 22:47:31 +0200</lastBuildDate><atom:link href="https://schnellerhase.github.io/en/posts/index.xml" rel="self" type="application/rss+xml"/><item><title>Google Summer of Code 2024 - Multigrid for FEniCSx</title><link>https://schnellerhase.github.io/en/posts/2024/gsoc/</link><pubDate>Thu, 22 Aug 2024 22:47:31 +0200</pubDate><guid>https://schnellerhase.github.io/en/posts/2024/gsoc/</guid><description>%!s(&lt;nil>)</description><content type="html"><![CDATA[<h2 id="intro">Intro</h2>
<p>This is the report on the Google Summer of Code 2024 project, entitled <a href="https://summerofcode.withgoogle.com/programs/2024/projects/YhEwl8iB">&lsquo;Multigrid for FEniCSx&rsquo;</a>, under the auspices of the <a href="https://numfocus.org/">NumFOCUS</a> organization, on the <a href="https://fenicsproject.org/">FEniCS Project</a>, which is (since 2016) fiscally supported by NumFOCUS.</p>
<p>Under the supervision of <a href="https://www.jackhale.co.uk/">Jack S. Hale</a> (Research Scientist, University of Luxembourg), <a href="https://www.ieef.cam.ac.uk/user/cnr12">Chris Richardson</a> (Research Software Engineer, University of Cambridge) and <a href="https://www.eng.cam.ac.uk/profiles/jpd62">Joseph Dean</a> (Research Scientist, University of Cambridge) the Google Summer of Code provided an opportunity for me to contribute to the FEniCS project and get to know open source software development efforts for high-performance computing applications.</p>
<p>The FEniCS project&rsquo;s primary component is the finite element solving environment, <a href="https://doi.org/10.5281/zenodo.10447666">DOLFINx</a>, on which the majority of the project&rsquo;s work was conducted.
The &ldquo;x&rdquo; indicates that this is a new version, which supersedes the former (now legacy) <a href="https://doi.org/10.11588/ans.2015.100.20553">DOLFIN</a>.
Although the objective of both the legacy and current projects is identical, the necessity to adapt to new requirements, incorporate new technological advances and, integrate insights gained from previous experiences has prompted the decision to rewrite and redesign the project in a new version.</p>
<h2 id="geometric-multigrid-and-an-application-to-gsoc">Geometric Multigrid and an Application to GSOC</h2>
<p>Let us for this section reference the proposal of the project, which explains the project&rsquo;s goals.</p>
<script type="text/javascript" src= '/js/pdf-js/build/pdf.js'></script>

<style>
  #embed-pdf-container {
    position: relative;
    width: 100%;
    height: auto;
    min-height: 20vh;
     
  }
  
  .pdf-canvas {
    border: 1px solid black;
    direction: ltr;
    width: 100%;
    height: auto;
    display: none;
  }
  
  #the-canvas {
    border: 1px solid black;
    direction: ltr;
    width: 100%;
    height: auto;
    display: none;
  }
  
  
  .pdf-loadingWrapper {
    display: none;
    justify-content: center;
    align-items: center;
    width: 100%;
    height: 350px;
  }
  
  .pdf-loading {
    display: inline-block;
    width: 50px;
    height: 50px;
    border: 3px solid #d2d0d0;;
    border-radius: 50%;
    border-top-color: #383838;
    animation: spin 1s ease-in-out infinite;
    -webkit-animation: spin 1s ease-in-out infinite;
  }
  
  
  
  
  
  #overlayText {
    word-wrap: break-word;
    display: grid;
    justify-content: end;
  }
  
  #overlayText a {
    position: relative;
    top: 10px;
    right: 4px;
    color: #000;
    margin: auto;
    background-color: #eeeeee;
    padding: 0.3em 1em;
    border: solid 2px;
    border-radius: 12px;
    border-color: #00000030;
    text-decoration: none;
  }
  
  #overlayText svg {
    height: clamp(1em, 2vw, 1.4em);
    width:  clamp(1em, 2vw, 1.4em);
  }
  
  
  
  @keyframes spin {
    to { -webkit-transform: rotate(360deg); }
  }
  @-webkit-keyframes spin {
    to { -webkit-transform: rotate(360deg); }
  }
  </style><div class="embed-pdf-container" id="embed-pdf-container-4b9aee19">
    <div class="pdf-loadingWrapper" id="pdf-loadingWrapper-4b9aee19">
        <div class="pdf-loading" id="pdf-loading-4b9aee19"></div>
    </div>
    <div id="overlayText">
      <a href="/gsoc-proposal.pdf" aria-label="Download" download>
        <svg aria-hidden="true" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 18 18">
            <path d="M9 13c.3 0 .5-.1.7-.3L15.4 7 14 5.6l-4 4V1H8v8.6l-4-4L2.6 7l5.7 5.7c.2.2.4.3.7.3zm-7 2h14v2H2z" />
        </svg>
      </a>
    </div>
    <canvas class="pdf-canvas" id="pdf-canvas-4b9aee19"></canvas>
</div>

<div class="pdf-paginator" id="pdf-paginator-4b9aee19">
    <button id="pdf-prev-4b9aee19">Previous</button>
    <button id="pdf-next-4b9aee19">Next</button> &nbsp; &nbsp;
    <span>
      <span class="pdf-pagenum" id="pdf-pagenum-4b9aee19"></span> / <span class="pdf-pagecount" id="pdf-pagecount-4b9aee19"></span>
    </span>
    <a class="pdf-source" id="pdf-source-4b9aee19" href="/gsoc-proposal.pdf">[pdf]</a>
</div>

<noscript>
View the PDF file <a class="pdf-source" id="pdf-source-noscript-4b9aee19" href="/gsoc-proposal.pdf">here</a>.
</noscript>

<script type="text/javascript">
    (function(){
    var url = '\/gsoc-proposal.pdf';

    var hidePaginator = "true" === "true";
    var hideLoader = "" === "true";
    var selectedPageNum = parseInt("1") || 1;

    
    var pdfjsLib = window['pdfjs-dist/build/pdf'];

    
    if (pdfjsLib.GlobalWorkerOptions.workerSrc == '')
      pdfjsLib.GlobalWorkerOptions.workerSrc = "https:\/\/schnellerhase.github.io\/" + 'js/pdf-js/build/pdf.worker.js';

    
    var pdfDoc = null,
        pageNum = selectedPageNum,
        pageRendering = false,
        pageNumPending = null,
        scale = 3,
        canvas = document.getElementById('pdf-canvas-4b9aee19'),
        ctx = canvas.getContext('2d'),
        paginator = document.getElementById("pdf-paginator-4b9aee19"),
        loadingWrapper = document.getElementById('pdf-loadingWrapper-4b9aee19');


    
    showPaginator();
    showLoader();

    

    function renderPage(num) {
      pageRendering = true;
      
      pdfDoc.getPage(num).then(function(page) {
        var viewport = page.getViewport({scale: scale});
        canvas.height = viewport.height;
        canvas.width = viewport.width;

        
        var renderContext = {
          canvasContext: ctx,
          viewport: viewport
        };
        var renderTask = page.render(renderContext);

        
        renderTask.promise.then(function() {
          pageRendering = false;
          showContent();

          if (pageNumPending !== null) {
            
            renderPage(pageNumPending);
            pageNumPending = null;
          }
        });
      });

      
      document.getElementById('pdf-pagenum-4b9aee19').textContent = num;
    }

    

    function showContent() {
      loadingWrapper.style.display = 'none';
      canvas.style.display = 'block';
    }

    

    function showLoader() {
      if(hideLoader) return
      loadingWrapper.style.display = 'flex';
      canvas.style.display = 'none';
    }

    

    function showPaginator() {
      if(hidePaginator) return
      paginator.style.display = 'block';
    }

    

    function queueRenderPage(num) {
      if (pageRendering) {
        pageNumPending = num;
      } else {
        renderPage(num);
      }
    }

    

    function onPrevPage() {
      if (pageNum <= 1) {
        return;
      }
      pageNum--;
      queueRenderPage(pageNum);
    }
    document.getElementById('pdf-prev-4b9aee19').addEventListener('click', onPrevPage);

    

    function onNextPage() {
      if (pageNum >= pdfDoc.numPages) {
        return;
      }
      pageNum++;
      queueRenderPage(pageNum);
    }
    document.getElementById('pdf-next-4b9aee19').addEventListener('click', onNextPage);

    

    pdfjsLib.getDocument(url).promise.then(function(pdfDoc_) {
      pdfDoc = pdfDoc_;
      var numPages = pdfDoc.numPages;
      document.getElementById('pdf-pagecount-4b9aee19').textContent = numPages;

      
      if(pageNum > numPages) {
        pageNum = numPages
      }

      
      renderPage(pageNum);
    });
    })();
</script>

<h2 id="implementation-decisions">Implementation decisions</h2>
<p>As a first step in the research and getting up to speed phase, it was necessary to figure out what the FEniCS project wants to achieve with a geometric multigrid implementation.
Its interaction with other, already present and future, features and the overall design principles of the DOLFINx code base played a major role during this phase.
Let us shortly recap some of the findings and their consequences for the project.</p>
<p>One of the fundamental design choices of DOLFINx (also in contrast to its predecessor) is the data driven design.
Functionality should be provided on standard data containers holding the necessary information, without further encapsulation and object based data wrapping, while implicit expectations on data or objects are to be kept to a minimum.
As a main motivation for this the extensibility and usability outside the initial thought out scope of a given functionality, are to be named.</p>
<p>For the multigrid implementation this resulted, after careful consideration, in the decision to make the transfer operation itself an explicit function that needs to be provided explicitly for a certain use case.
This is a different path of choice, then what for example Firedrake (see <a href="https://www.firedrakeproject.org/demos/geometric_multigrid.py.html">here</a>) and PETSc (see <a href="https://petsc.org/release/manualpages/PC/PCGAMG/">here</a>) support with the very implicit construction of transfer operations under the hood, without the user needing to deal with any of it explicitly.
In addition the mesh hierarchies considered in this project should be produced by the available refinement routines (based on the work of <a href="https://www.oden.utexas.edu/media/reports/1996/9654.pdf">Plaza</a>), and not be applicable to general meshes without clear containment.</p>
<p>Besides more explicitly for the user, the design should also, in principle, allow for higher performance, or at least greater control over it, as features are not employed if not chosen by the user.</p>
<p>TODO: big picture, after intro (loss of big picture: p-multigrid, domain decomposition)</p>
<h2 id="interpolation-operators-and-dual-operators">Interpolation Operators and Dual Operators</h2>
<p>A first idea to approach the implementation of a geometric multigrid with the hope of an easy to attain proof of concept, came with the availability of the non-matching mesh interpolation routine of DOLFINx.
This routine implements a general interpolation operation between non matching meshes, and thus also non-matching, function spaces in general.
So we have already the implementation at hand to produce for two different finite element approximation spaces ( V*\text{coarse} ) and ( V*\text{fine} ) mappings</p>
<p>$$
P : V_\text{coarse} \to V_\text{fine}
\quad \text{and} \quad
R : V_\text{fine} \to V_\text{coarse}.
$$</p>
<p>Especially the map ( P ) is injective and ( R ) is surjective, which we expect from general restriction and prolongation operators.</p>
<p>So a first approach might be to make use of these mappings for a first geometric multigrid implementation and refine it after.
However a closer look shows an unfixable flaw in this setup.</p>
<p>Let us consider an example.</p>
<p>TODO: A nice example</p>
<p>The problem with the non matching interpolation routines as transfer operators arises from the fact that they are not adjoint maps of one another.
This breaks the properties of the multigrid operator - for example without duality we loose every mathematical ground of proving any properties of the multigrid operator matrix, such as for example the for convergence critical spectral radius.</p>
<p>TODO: story about adjointness of the operators vs adjointsnes of the transfer matrices.</p>
<h2 id="interval-refinement-in-dolfinx">Interval Refinement in DOLFINx</h2>
<p>So, the logical step for getting started with a geometric multigrid in the setting of mesh hierarchies produced by refinement routines is naturally the one dimensional case, i.e. interval meshes.
However DOLFINx at the time did not provide any such routine.
So as a first major step the implementation of a one dimensional refinement routine was addressed, and resulted in a (merged) <a href="https://github.com/FEniCS/dolfinx/pull/3314">pull request</a>.</p>
<p>Let us consider a small example to make clear what we need to do.
Given a mesh of three vertices (bold) and two cells (or equivalently edges)</p>
<p><strong>0</strong> &mdash; 0 &mdash; <strong>1</strong> &mdash; 1 &mdash; <strong>2</strong> &mdash; 2 &mdash; <strong>3</strong></p>
<p>we would like to perform a refinement on a set of marked edges (M).
Let us consider the uniform refinement case first, so we mark all edges for refinement, i.e. ( M={ 0, 1, 2 } ).
While in higher dimensions mesh refinement offers a great number of applicable refinement schemes for refining an edge marked mesh, in one dimension the necessary operation is unique.
Every marked edge should be split, i.e. a new vertex in the center is to be introduced and the former edge split into two new finer/shorter ones.
For the former mesh we thus expect the fine mesh</p>
<p><strong>0</strong> &mdash; 0 &mdash; <strong>1</strong> &mdash; 1 &mdash; <strong>2</strong> &mdash; 2 &mdash; <strong>3</strong> &mdash; 3 &mdash; <strong>4</strong> &mdash; 4 &mdash; <strong>5</strong> &mdash; 5 &mdash; <strong>6</strong>.</p>
<p>At a first sight, this seems like a very straight forward operation to implement, however a few caveats arising from parallel data structures with relabeling of indices for locality and the for parallel use cases inevitable repartitioning make this surprisingly evolved to implement.</p>
<p>TODO: mesh stored data and aspects of parallelization
TODO: algorithm of choice
TODO: output: parent cells</p>
<p>For the debugging of the code, especially in parallel, looking at visualizations of the pre- and post-refinement meshes was a crucial step.
This was easy to do thanks to the handy <a href="https://github.com/nate-sime/febug">febug</a> tool, making visualization of different mesh entities straight forward and simple.</p>
<h3 id="a-story-on-assertions-in-compiled-python-modules">A Story on Assertions in Compiled Python Modules</h3>
<p>After discovering an initial bug in the merged code, resulting in an obscure crash of a python test, we discovered a problem of the interaction with assertions and the python runtime.
The error was caused by the code hitting, correctly due to a wrongly designed test case, an assertion in the C++ part of the software.
However the <code>pytest</code> framework, which is used for unit and integration tests in the FEniCS project, did not pick up on this and only showed a inconclusive core dump.
This turned out to be a bigger and not trivially fixable problem.
If the C++ part, i.e. in a call of the compiled python module, hits an C-style assertion the runtime itself is killed, as this triggers a call to ´abort´.
Especially the handling of the assertion is not returned to the outer python context which has systems in place to recover from this.
As <code>abort</code> produces a <code>SIGABRT</code> signal that forcefully ends the program there is no easy way of fixing this interaction.
However if the python module (so the C++ code) is build in a <code>Debug</code> mode we would like to be able to debug from the python side as well, which is then no longer possible.
This needs to be investigated further and remains an <a href="https://github.com/FEniCS/dolfinx/issues/3333">open issue</a>.</p>
<h3 id="unifying-the-refinement-interface">Unifying the Refinement Interface</h3>
<p>After the one dimensional refinement routine was merged, in a second endeavor we wanted to merge its interface with the previously available two and three dimensional Plaza refinement routines.
This resulted in a lot of changes and simplifications to the interface.
It became more explicit and easier to use.</p>
<p>One technical change that was introduced to facilitate this was the use of <code>std::optional</code>&rsquo;s for input and output parameters.
Previously these were not used and a &rsquo;no-set&rsquo; case was always handled separately leading to multiple different code paths.
Additionally this dispatching needed to be present in the python module as well.
Nanobind (the python exporter used in the DOLFINx project) however supports the <code>std::optionals</code> matching from the python optional <code>None</code> or value style for this.
So after changing we no longer need to handle different parameter combinations in the python module, but that all happens in C++ module.</p>
<h2 id="the-transfer-matrix">The Transfer Matrix</h2>
<p>Coming soon&hellip;</p>
<ul>
<li>parallelization and ghost nodes</li>
<li>graph partitioning</li>
</ul>
<h2 id="geometric-twogrid-example">Geometric Twogrid Example</h2>
<p>Coming soon&hellip;</p>
<h2 id="general-code-contributions">General Code Contributions</h2>
<p>While the main project focused on the implementation of a geometric multigrid a lot of incidental and supportive changes where contributed to different repositories as well.
Split across multiple repositories, we want to shortly outline the highlights of these in chronological order.</p>
<h3 id="dolfinx---introduce-aliasing-for-mdspan-closedhttpsgithubcomfenicsdolfinxpull3116">DOLFINx - Introduce aliasing for mdspan <a href="https://github.com/FEniCS/dolfinx/pull/3116">(Closed)</a></h3>
<p>The <code>mdspan</code> library in use with the FEniCS Project is based on the Kokkos <a href="https://github.com/kokkos/mdspan">refrence implementation</a>.
To facilitate the namespace switching depending on compiler support of either <code>std::experimental::mdspan</code> or <code>std::mdspan</code> or none of the above the implementation introduces the macro <code>MDSPAN_IMPL_STANDARD_NAMESPACE</code>.
This causes bloated calls, i.e. every time it is necessary to write out <code>MDSPAN_IMPL_STANDARD_NAMESPACE::mdspan</code>.
In the pull request this was suggested to be wrapped into a custom hiding layer, i.e. allowing for access via <code>dolfinx::common::mdspan</code>, no matter to what this dispatches to.
This would also allow the code to remain untouched in the future if one updates to the STL versions.
After a discussion the changes were rejected, due to it being considered an approximation of a third-party library.</p>
<h3 id="basix---update-mdspan-mergedhttpsgithubcomfenicsbasixpull840">Basix - Update mdspan <a href="https://github.com/FEniCS/basix/pull/840">(Merged)</a></h3>
<p>Update to new Kokkos single header <code>mdspan</code> changes.</p>
<h3 id="dolfinx---make-compile-time-options-compile-time-constants-mergedhttpsgithubcomfenicsdolfinxpull3246">DOLFINx - Make compile time options compile time constants <a href="https://github.com/FEniCS/dolfinx/pull/3246">(Merged)</a></h3>
<p>Previously in translation units wrapped transformation of compiler flag was moved to header files in combination with the usage of <code>consteval</code> to make them truly compile time constants.
The idiom of the changes was for a given (<code>cmake</code>) flag <code>FLAG</code> is demonstrated below.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-cpp" data-lang="cpp"><span class="line"><span class="cl"><span class="k">consteval</span> <span class="kt">bool</span> <span class="nf">has_flag</span><span class="p">()</span>
</span></span><span class="line"><span class="cl"><span class="p">{</span>
</span></span><span class="line"><span class="cl"><span class="cp">#ifdef FLAG
</span></span></span><span class="line"><span class="cl"><span class="cp"></span>  <span class="k">return</span> <span class="nb">true</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="cp">#else
</span></span></span><span class="line"><span class="cl"><span class="cp"></span>  <span class="k">return</span> <span class="nb">false</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="cp">#endif
</span></span></span><span class="line"><span class="cl"><span class="cp"></span><span class="p">}</span>
</span></span></code></pre></div><h3 id="dolfinx---some-updates-for-mesh-generation-openhttpsgithubcomfenicsdolfinxpull3275">DOLFINx - Some updates for mesh generation <a href="https://github.com/FEniCS/dolfinx/pull/3275">(Open)</a></h3>
<p>Whilst reading up the mesh related data structures in DOLFINx for the project, I notices quite a few sub-optimal code paths in the generation code of meshes.
In this PR these were addressed, mostly consisting of modernizations, simplifications and some additional testing.
The modernizations also made use of the previously (in the FEniCS Project) unused <a href="https://en.cppreference.com/w/cpp/ranges">ranges library</a>, this was the trigger for looking into the following 12 pull requests.</p>
<h3 id="basix---update-to-stdranges-usage-mergedhttpsgithubcomfenicsbasixpull837">Basix - Update to std::ranges usage <a href="https://github.com/FEniCS/basix/pull/837">(Merged)</a></h3>
<p>Made use of all <code>C++20</code> available ranges algorithms in the Basix code base.</p>
<h3 id="basix---c23-support-revertedhttpsgithubcomfenicsbasixpull838">Basix - C++23 Support <a href="https://github.com/FEniCS/basix/pull/838">(Reverted)</a></h3>
<p>Some important parts of the ranges library were missed in <code>C++20</code>, and are only available from <code>C++23</code> onward.
So to check general compatibility of the FEniCS packages with <code>C++23</code> we looked into the root dependency Basix and confirmed that we it is <code>C++23</code> ready in this PR.
This move to the <code>C++23</code> standard was later on reverted, and it was decided on to (not yet) switch to <code>C++23</code> but remain with <code>C++20</code> for now mainly due to lacking compiler support.</p>
<h3 id="dolfinx---update-to-stdranges-usage">DOLFINx - Update to <code>std::ranges</code> usage</h3>
<p>Modernization to range based algorithms across all of DOLFINx, split up into several PR&rsquo;s:</p>
<ul>
<li>Replace <code>std::sort</code> with <code>std::ranges::sort</code> <a href="https://github.com/FEniCS/dolfinx/pull/3293">(Merged)</a></li>
<li>Replace <code>std::fill</code> with <code>std::ranges::fill</code> <a href="https://github.com/FEniCS/dolfinx/pull/3294">(Merged)</a></li>
<li>Replace <code>std::lower/uper_bound</code> with <code>std::ranges::lower/uper_bound</code> <a href="https://github.com/FEniCS/dolfinx/pull/3295">(Merged)</a></li>
<li>Replace <code>std::for_each</code> with <code>std::ranges::for_each</code> <a href="https://github.com/FEniCS/dolfinx/pull/3296">(Merged)</a></li>
<li>Replace <code>std::transform</code> with <code>std::ranges::transform</code> <a href="https://github.com/FEniCS/dolfinx/pull/3297">(Merged)</a></li>
<li>Replace <code>std::set_*</code> with <code>std::ranges::set_*</code> <a href="https://github.com/FEniCS/dolfinx/pull/3298">(Merged)</a></li>
<li>Replace <code>std::copy</code> with <code>std::ranges::copy</code> <a href="https://github.com/FEniCS/dolfinx/pull/3299">(Merged)</a></li>
<li>Replace <code>std::min/max</code> with <code>std::ranges::min/max</code> <a href="https://github.com/FEniCS/dolfinx/pull/3300">(Merged)</a></li>
<li>Replace <code>std::unique</code> with <code>std::ranges::unique</code> <a href="https://github.com/FEniCS/dolfinx/pull/3315">(Merged)</a></li>
</ul>
<h3 id="rework-radix_sort-mergedhttpsgithubcomfenicsdolfinxpull3313">Rework <code>radix_sort</code> <a href="https://github.com/FEniCS/dolfinx/pull/3313">(Merged)</a></h3>
<p>While updating from <code>std::sort</code> to <code>std::ranges::sort</code>, I noted, that the custom DOLFINx implementation of radix sort <code>radix_sort</code> (which is used for performance critical sorting of degree of freedom indices mostly), is not compatible with the ranges interface.
In this pull request a range based <code>radix_sort</code> was introduced, which allows for &rsquo;equal&rsquo; usage as <code>std::ranges::sort</code>.
For this the operator based approach as in the ranges library was followed and a projection routine for the elements can be injected.
This enabled for the removal of the previously also hand coded <code>argsort_radix</code> in DOLFINx, leaving only one <code>radix_sort</code> functionality left.
Due to its performance relevance the changes where benchmarked <a href="https://github.com/schnellerhase/dolfinx/pull/24">here</a> and showed that the higher quality code is also the faster one.</p>
<h3 id="favor-exterior_facet_indices-over-locate_entities_boundary-for-retrieving-complete-boundary-mergedhttpsgithubcomfenicsdolfinxpull3283">Favor <code>exterior_facet_indices</code> over <code>locate_entities_boundary</code> for retrieving complete boundary <a href="https://github.com/FEniCS/dolfinx/pull/3283">(Merged)</a></h3>
<p>This pull request addressed the observation that when all boundary entities need to be selected in FEniCSx to construct a Dirichlet boundary condition on it, we must not filter these with a specific lambda as the default interface of <code>locate_entities_boundary</code> requires, but rather use the <code>exterior_facet_indices</code> which just gets all boundary facets.
This triggered a (still ongoing) discussion on optional arguments in the DOLFINx code base and its implications to the exported python module.</p>
<h3 id="some-other-strictly-maintenance-prs">Some other strictly maintenance PR&rsquo;s</h3>
<ul>
<li>DOLFINx - Fix ruff check <a href="https://github.com/FEniCS/dolfinx/pull/3349">(Merged)</a></li>
<li>febug - Fix installation with <code>dolfinx</code> main <a href="https://github.com/nate-sime/febug/pull/13">(Merged)</a></li>
<li>FEniCS/web - Fix CI <a href="https://github.com/FEniCS/web/pull/187">(Merged)</a></li>
</ul>
<h2 id="acknowledgements">Acknowledgements</h2>
<p>I would like to express my gratitude to the following individuals and institutions for their support and contributions:</p>
<p>Firstly I would like to the (previously mentioned) supervisors of the GSOC project, for their kind welcome to the community and receptivity to new ideas, as well as for fostering a generally constructive and engaging atmosphere for discussion.</p>
<p>I am indepted to <a href="https://finsberg.github.io/">Henrik N. Finsberg</a> (Senior Research Engineer, Simula Research Laboratory) and <a href="https://jsdokken.com/">Jørgen S. Dokken</a> (Senior Research Engineer, Simula Research Laboratory) for acting as my initial point of contact with the FEniCS project and for making me aware of the possibilty of a GSOC project.</p>
<p>Furthermore, I would be remiss if I did not acknowledge the contributions of all community members who provided assistance on the Slack channel or through comments and feedback on various pull requests.</p>
<p>During the GSOC period, I was fortunate to attend the <a href="https://fenicsproject.org/fenics-2024/">FEniCS conference 2024</a>, which I was able to do with the assistance of a NumFOCUS travel award.
Otherwise, it would not have been feasible to interact with all of the mentors and community members who were present in person.</p>
<p>In conclusion, I would like to express my gratitude to the Google Summer of Code program for providing me with the opportunity and financial support, which enabled me to pursue my academic interests and enhance my technical abilities with minimal constraints.</p>
]]></content></item></channel></rss>